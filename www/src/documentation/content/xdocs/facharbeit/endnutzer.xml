<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Endnutzerdokumentation</title>
  </header>
  <body>
    <section id="about">
      <title>Einleitung</title>
      <p>
         Dieses Kapitel beschreibt die Nutzung von Schoorbs/MRBS für normale Nutzer. Es ist 
         speziell für meine Facharbeit auf die Nutzung an einer Schule ausgerichtet. Manche 
         Empfehlungen sind deshalb auch nur bei Schulen sinnvoll. 
      </p>
    </section>
    <section id="install">
      <title>Installation</title>
      <section id="vorraus">
        <title>Vorraussetzungen</title>
        <table>
          <tr>
            <th>Allgemein</th>
            <th>Am HSG vorhanden</th>
          </tr>
          <tr>
            <td>einen Webserver wie z.B. Apache</td>
            <td>Apache 1.3.x</td>
          </tr>
          <tr>
            <td>PHP >= 4.3.x als Servermodul (SAPI) oder (Fast)CGI</td>
            <td>PHP 4.3.10 als CGI-Modul</td>
          </tr>
          <tr>
            <td>PosgtreSQL >= 7.x oder MySQL >= 4.x</td>
            <td>PostgreSQL 7.4.x</td>
          </tr>
        </table>
      </section>
      <section id="files">
        <title>Dateien</title>
        <p>
          Die nötigen Dateien für MRBS/Schoorbs entpackt man direkt in den jeweiligen DOCUMENT_ROOT 
          des Webservers, bei MRBS entpackt man nur den Unterordner web/ dorthin, bei Schoorbs alle
          Dateien. Bei Schoobrs kopiert man nun noch die Datei config.inc.php-dist nach 
          config.inc.php, welche Einstellungen ich hier vorgenommen habe, erkläre ich im Kapitel 
          „Konfiguration“.
        </p>
      </section>
      <section id="database">
        <title>Datenbank</title>
        <p>
          Da wir uns entschlossen hatten PostgreSQL zu benutzen (für Gründe, siehe Kapitel Datenbank),
          hab ich mir von unserem Systemadminstrator mit
        </p>
        <source>
          createdb mrbs
        </source>
        <p>
          eine PostgreSQL-Datenbank erzeugen lassen. Diese habe ich dann mit dem Befehl
        </p>
        <source>
          psql -a -f tables.pg.73and_above.sql mrbs
        </source>
        <p>
          mit den nötigen Tabellenstrukturen gefüllt. Die Datei „tables.pg.73and_above.sql“ stammt
          aus dem Hauptverzeichnis von MRBS und ist im Gegensatz zur tables.pg.sql kompatibel mit 
          PostgreSQL-Versionen >= 7.3.x.
        </p>
      </section>
    </section>

    <section id="conf">
      <title>Konfiguration</title>
      <section id="database-conf">
        <title>Datenbank</title>
        <p>
          Die Datenbankeinstellungen waren leicht verständlich, da sie wie überall sonst aufgebaut 
          waren. Man musst einfach nur die Verbindungsdetails wie Host, User usw. angeben. Wichtig 
          war hier aber auch, das man das Datenbanksystem (Variable: $dbsys) auf „pgsql“ stellt, 
          um so PostgreSQL statt MySQL zu nutzen. Am Ende sah dann die Datenbankonfiguration so aus
         (Kommentare entfernt):
        </p>
        <source>
          $dbsys = "pgsql";
          $db_host = "localhost";
          $db_database = "mrbs";
          $db_login = "uwe";
          $db_password = ..versteckt..;
          $db_tbl_prefix = "mrbs_";
          $db_nopersist = 1;
        </source>
      </section>
      <section id="site-info">
        <title>Seiteninformationen</title>
        <p>
          Als Seiteninformation konnte man nicht viel eintragen, lediglich den Administrator und 
          seine Mail. Weiterhin konnte man noch den „Unternehmensbanner“ festlegen, der links oben
          gezeigt wird, ich habe hier einfach nur „Hohenstaufengymnasium Kaiserslautern“ als puren 
          Text eingegeben.
        </p>
        <source>
          $mrbs_admin = "Uwe L. Korn";
          $mrbs_admin_email = "uwelk@xhochy.org";
          $mrbs_company = "Hohenstaufen Gymnasium Kaiserslautern";
        </source>
      </section>
      <section id="cal-conf">
        <title>Kalender</title>
        <p>
          Ich habe anstatt festgelegten Zeiteinheiten, die alle eine gemeinsame Dauer haben, Periods
          benutzt um so die unterschiedlichen Zeiten wie z.B. Pausen einzubauen. Hierzu gibt man 
          nicht mehr die Zeiten an, sondern benennt die Einheiten jeweils, diese Perioden werden in
          einem Array abgespeichert, die Reihenfolge im Array ist auch die Reihenfolge auf dem 
          Bildschirm. Durch die Perioden fällt auch das Einstellen jeglicher Tagesanfänge, 
          Sommerzeiten usw. weg.
        </p>
        <source>
          $enable_periods = true;
          $periods[] = "08:00-08:45";
          $periods[] = "08:45-09:30";
          $periods[] = "09:30-09:45";
          $periods[] = "09:45-10:30";
          $periods[] = "10:30-11:15";
          $periods[] = "11:15-11:30";
          $periods[] = "11:30-12:15";
          $periods[] = "12:15-13:00";
          $periods[] = "13:00-13:15";
          $periods[] = "13:15-14:00";
          $periods[] = "14:00-14:45";
          $periods[] = "14:45-15:30";
          $periods[] = "15:30-16:15";
        </source>
      </section>
      <section id="auth-conf">
        <title>Authentifizierung</title>
        <p>
          Alle nötigen Konfiguration zu den Authentifizierungsmechanismen werden im gegensatz zu 
          allen anderen Konfigurationsabschnitte in nur 1 Variable, dem Array $auth, abgespeichert.
          Als Sessionmeachnismus benutzte ich das PHP-Auth-Modul, für die Passwortüberprüfung „ext“.
          Die Adminstratoren der Installation speichert man im Array $auth['admin'], bei der 
          Beispielkonfiguration hier, habe ich mich selber zum Administrator gemacht. In 
          $auth['prog'] und $auth['params'] gibt man die nötigen Parameter für den Programmaufruf 
          aus dem Auth-ext-Modul an, Einzelheiten dazu im Kapitel „Authentifizierung“.
        </p>
        <source>
          $auth["session"] = "php";
          $auth["type"] = "ext"; 
 
          $auth['admin'][] = 'uwe';				
 
          $auth["prog"]   = "/usr/bin/smbclient";
          $auth["params"] = " //linux1//m #PASSWORD# -U #USERNAME# -c 'quit' > /dev/null 2>&amp;1";
        </source>
      </section>
      <section id="lang-conf">
        <title>Sprache</title>
        <p>
          Bei den Spracheinstellungen habe ich zwar direkt alles auf Deutsch und Unicode-Encoding 
          gesetzt, musste jedoch danach erst mal die noch nicht mitgelieferte deutsche FAQ-Seite 
          runterladen und die deutsche Sprachdatei nach UTF-8 konvertieren, da diese als 
          ISO-8859-1 vorlag. Bei Schoorbs/MRBS ist jedoch die $default_language_tokens nicht 
          Standard für alle, sondern nur eine Empfehlung, sollte für die jeweilige Sprache, die der
          Browser wünscht keine Sprachdatei vorhanden sein, die FAQ-Seite jedoch ist nicht so 
          dynmaisch und jeder bekommt eine deutsche angezeigt, egal welche Sprache er im Browser 
          eingestellt hat.
        </p>
        <source>
          $unicode_encoding = 1;
          $default_language_tokens = "de";
          $faqfilelang = "_de";
        </source>
      </section>
      <section id="cat-conf">
        <title>Kategorien</title>
        <p>
          Schoorb/MRBS bietet die Möglichkeit Buchungen in Kategorien einzuodnen und sie passend 
          farblich zu hinterlegen. Dazu existieren die Arrayspalten 'A' - 'J' des Arrays $typel. 
          Jeder Buchstabe färbt den jeweiligen Eintrag anders, die Farbe wird per CSS festgelegt.
          Ich habe zu den beiden Standardkategorien „Extern“ und „Intern“ noch „Referat“, 
          „normaler Unterricht“ und „Kursarbeit“ hinzugefügt um die einzelnen Vorkommen an der 
          Schule abzudecken.
        </p>
        <source>
          $typel["A"] = "Referat";
          $typel["B"] = "normaler Unterricht";
          $typel["C"] = "Kursarbeit";
          # $typel["D"] = "D";
          $typel["E"] = get_vocab("external");
          # $typel["F"] = "F";
          # $typel["G"] = "G";
          # $typel["H"] = "H";
          $typel["I"] = get_vocab("internal");
          # $typel["J"] = "J";
        </source>
      </section>
      <section id="misc-conf">
        <title>Sonstige Einstellungen</title>
        <p>
          Sontige Konfigurationen sind z.B. die maximale Anzahl an Wiederholungen, die ein 
          regelmäßiger Termin haben kann(→ $max_rep_entrys). Weiterhin kann man noch festlegen,
          ob auch auf der rechten Seite der Tabelle die Uhrzeiten angezeigt werden sollen, ich habe
          dies abgestellt, da ich finde, dass die GUI von Schoorbs/MRBS schon sehr breit ist und 
          durch eine weitere Zeitspalte es auf kleineren Bildschirmen unübersichtlich werden könnte.
          Mit $javascript_cursor habe ich das Hervorheben der jeweils aktuellen Zelle aktiviert, 
          man könnte dies zwar auch mit dem CSS-Tag :hover realisieren, jedoch nur in neueren 
          Browsern, zu Mal wie fast immer der IE sich weigert, dies bei nicht a-Tags zu 
          interpretieren. Die default-Ansicht habe ich auf Day gestellt, da die meisten Lehrer wohl
          für den heutigen oder morgigen Tag eine Reservierung durchführen wollen.
        </p>
        <source>
          $max_rep_entrys = 365 + 1;
          $times_right_side = FALSE;
          $javascript_cursor = true; 
          $default_view = "day"
        </source>
      </section>
    </section>

    <section id="common-use">
      <title>Normaler Gebrauch</title>
      <section id="room-booking">
        <title>einen Raum einmalig/wiederholend bestellen</title>
        <p>
          Standardmäßig muss man auf das grüne Kreuz klicken um den „Bestellvorgang“ für einen Raum
          zu starten. Es ist hierbei jedoch nicht wichtig welchen Termin man auswählt bzw. welchen 
          Raum, man muss nur achten, dass man im richtigen Bereich auf das Kreuz klickt, alle 
          anderen Parameter kann man auf der darauffolgenden Seite noch ändern.
        </p>
        <figure src="enduser-doku1.png" alt="Raumübersicht" />
        <p>
          Hat man nun darauf geklickt wird man auf die Seite „Eintrag hinzufügen“ weitergeleitet. 
          Unter Kurzbeschreibung sollte man das Unterrichtsfach und die Klassen eintragen. Eine 
          vollständige Beschreibung ist nicht zwingend nötig, sie ist aber bei Terminen, die von 
          mehreren Lehrern betreut werden sehr sinnvoll, da man so auch noch direkt relevante 
          Informationen mitteilen kann. Unter Period gibt man die Starteinheit(entweder eine 
          Schulstunde oder eine Pause) ein. Pausen habe ich buchbar gemacht um Überschneidungen 
          bei z.B. Kursarbeiten vorzubeugen, bei denen 2 Lehrer beide während der Pause schreiben 
          wollten, der eine in der Pause noch zu Ende, der andere wollte in der Pause mit der 
          nächsten Kursarbeit schon anfangen. Genauso muss man auch aufpassen, dass man bei der 
          Anzahl der Periods, die man benötigt auch bei 2/3 oder mehr Schulstunden die Pausen auch 
          noch mitzählt, was bedeutet, dass wenn man den Informatiksaal für die 1., 2. und 3. Stunde
          bestellen würde, man ihn für 4 Periods reservieren müsste. Bei der Art kann man festlegen,
          ob man lediglich normalen Unterricht macht oder ob man eine Kursarbeit schreibt, dies 
          dient lediglich zur Information anderer Kollegen und hat intern keine Bedeutung.
        </p>
        <figure src="enduser-doku2.png" alt="Raumbestellung" />
        <p>
          Alles was ich bisher erklärt habe, muss man für alle Termine wissen, egal ob man sie für 
          ein einziges Mal bucht oder ob sie häufiger vorkommen. Sollte letzteres ein Mal vorkommen
          so sind die letzten drei Zeilen des Formulars interessant. Bei dem „Ende der Wiederholung“
          legt man den letzten Tag fest, an dem nochmals der Termin auftreten dürfte, die anderen 
          beiden Felder dürften selbsterklärend sein.
        </p>
        <p>
          Nach einen Klick auf Speichern bekommt man entweder den Kalender angezeigt, inklusive des
          neu gebuchten Termins oder eine Liste aller Termine, die mit dem Termin in Konflikt liegen,
          den man buchen wollte. 
        </p>
      </section>
      <section id="unusage-room">
        <title>einen Raum abbestellen</title>
        <p>
           Sollte man eine Buchung doch nicht benötigen kann man diese, sofern sie nicht in der 
           Vergangenheit liegt, wieder abbestellen. Hierzu klickt man in der Kalenderübersicht 
           einfach auf den Termin. Am unteren Ende der Informationen zu diesem Termin gibt es 
           einen Link „Eintrag löschen“, dieser löscht nur diesen Eintrag, egal ob es ein einzelner
           ist oder ob er zu einer wiederhiolenden Veranstaltung gehört. Sollte es eine 
           wiederholende Veranstaltung sein, hat man auch noch die Möglichkeit auf den Link „Alle 
           Einträge löschen“ zu klicken, was dann alle Einträge dieser Veranstaltung löschen würde.
           Zur Sicherheit macht Schoorbs/MRBS aber vor jedem Löschen noch eine Ja/Nein-Abfrage per 
           Javascript.
        </p>
      </section>
      <section id="change-booking">
        <title>einen Termin ändern</title>
        <p>
          Hat man beim Bestellen einen Fehler gemacht und möchte den Termin nicht erst löschen und 
          dann wieder neu eingeben, kann man auf der Übersichtsseite des Termin auf „Eintrag ändern“ 
          klicken und man kann dann dort alles wieder neu einstellen, genauso als würde man einen 
          neuen Eintrag hinzufügen.
        </p>
      </section>
    </section>
  </body>
</document>
