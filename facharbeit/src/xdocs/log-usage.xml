<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Nutzung</title>
  </header>
  <body>
    <section id="tech-usage">
      <title>technische Anwendung</title>
      <p>
        Technisch gesehen muss man die Logging-Schnittstelle nochmals in zwei
        Schichten aufteilen. Zum einen gibt es das sog. Logging-Backend, welches
        lediglich eine Statusmeldung entgegennimmt und abspeichert. Andererseits
        gibt es noch den Logging-Wrapper(die Datei 
        <code>schoorbs-includes/logging.functions.php</code>), welcher von den 
        anderen Schoorbs-Funktionen einzelne Informationen, wie z.B. den 
        Bearbeiter oder die Startzeit entgegennimmt und daraus eine 
        Protokollnachricht macht.
      </p>
      <p>
        <!-- Wie spricht man die Logging-Schnittstelle an? -->
        Möchte man nur von einer Funktion aus eine Protokollnachricht schreiben, 
        so kann man eine der schon programmierten Wrapper-Funktionen nutzen, wie
        z.B. <code>schoorbsLogDeletedEntry()</code>.  Möchte man jedoch ein 
        Ereignis protokollieren, für welches noch keine Wrapper-Funktion 
        vorhanden ist, so empfiehlt es sich, eine neue Wrapper-Funktion zu 
        schreiben. Wrapper-Funktionen sind sinnvoll, denn sollte sich etwas an 
        der Protokollierungslogik ändern, so brauch man nur diese Funktionen zu
        bearbeiten. Mögliche Veränderungen in Zukunft wären z.B. dass man alle
        Nachrichten internalitionalisiert, d.h. in mehere Sprachen übersetzt 
        oder dass das Protokollieren in 2 Backends möglich wäre.
      </p>
      <p>
        Wie man nun eine eigene Wrapper-Funktion programmiert, möchte ich am 
        Beispiel von <code>schoorbsLogDeletedEntry</code> zeigen. Fast alle
        Wrapper-Funktionen sind nach dem gleichen Prinzip aufgebaut. Zu erst 
        wird ein Templatestring mit Werten gefüllt und danach wird die Nachricht 
        an das Backend geschickt.<br />
        Bevor man nun jedoch die Funktion in seinem ursprünglichen Code aufruft,
        muss man zuerst mit man mit <code>$aEntryInfo = mrbsGetEntryInfo($nId);</code>
        sich die nötigen Informationen zu dem Eintrag holen. Da man die 
        Informationen in einem Array abgespeichert hat, empfiehlt sich folgendes
        Vorgehen:
      </p>
      <ol>
        <li>EntryInfo holen</li>
        <li>Eintrag löschen</li>
        <li>
          Nur wenn der Eintrag erfolgreich gelöscht wurde, wird 
          <code>schoorbsLogDeletedEntry()</code> aufrufen.
        </li>
      </ol>
      <p>
        In der Wrapperfunktion selbst füllst man mit sprintf und den 
        Informationen zu dem Eintrag das Template für die Protokollnachricht. 
        Ich möchte hier zwar nicht genauer auf die Funktionsweise von sprintf
        eingehen, jedoch reicht es für die Programmierung einer Wrapper-Funktion 
        eigentlich aus zu wissen, dass <code>%s</code> der Platzhalter für einen
        String ist. Die Strings werden in der Folge für die Platzhalter 
        eingesetzt, wie sie als Argumente bei dem Funktionsaufruf angegeben 
        wurden.
      </p>
      <source>$sLine = sprintf(
	'Entry "%s" in resource "%s" (%s -> %s) created by "%s" was deleted by '
	.'"%s"',
	$aEntryInfo['name'], schoorbsGetResourceName($aEntryInfo['room_id']), 
	date('d M Y H:i:s', $aEntryInfo['start_time']),
	date('d M Y H:i:s', $aEntryInfo['end_time']),
	$aEntryInfo['create_by'], getUserName()
);</source>
      <p>
        Im nächsten Schritt teilt man dem Backend nur noch mit, dass es eine 
        neue Protokollnachricht speichern soll. Man selbst muss sich nun nicht
        mehr drum kümmern wie und wo die Nachricht gespeichert wird.
      </p>
      <source>schoorbsLogWriteLine_Backend($sLine);</source>
    </section>
    <section id="tech-own">
      <title>ein eingenes Backend programmieren</title>
      <p>
        <!-- Wozu? -->
        Das Syslog-Logging-Backend ist zwar bei Linux Systemen sehr einfach 
        einzusetzen, jedoch wird es in den meisten Fällen nicht dem Wunsch des
        Endnutzers entsprechen, da man die Logfiles des Systems als z.B. 
        Webhosting nicht lesen kann. Hier empfiehlt sich es z.B. das Logging in
        der Datenbank abzuspeichern, wozu man selber ein eigenes, neues 
        Logging-Backend schreiben muss. Für Schoorbs existiert zur Zeit jedoch 
        nur das Syslog-Backend, da es im Rahmen meiner Facharbeit von mir 
        erstellt wurde.
      </p>
      <p class="pageBreakAfter">
        <!-- Welche Funktionen muss ich implementieren? -->
        Um ein funktionierendes Logging-Backend zu Erstellen, muss man nur die 
        Funktionen <code>schoorbsLogStart_Backend</code> und 
        <code>schoorbsLogWriteLine_Backend</code> implementieren. In der ersten
        Funktion sollte man alle Routinen unterbringen, die zur Initialisierung
        des Loggings nötig sind, z.B. das Öffnen der Verbindung zum 
        Syslog-Dienst. In der <code>WriteLine</code>-Funktion sollte dann der
        Vorgang des Abspeichern der eingebenen Nachricht implementiert sein.
        Nun muss der Code nur noch in einer Datei an der Position 
        <code>schoorbs-includes/logging/&lt;name&gt;.php</code> abgespeichert 
        werden und in <code>schoorbs-includes/logging.configuration.php</code>
        durch Setzen des Eintrags 'backend' auf '&lt;name&gt;' aktiviert werden.
      </p>
    </section>
  </body>
</document>
